#!/bin/sh

# Copyright 2021 Yves Blusseau

# Script based on: https://github.com/scop/vault-token-helper-secret-tool/blob/master/vault-token-helper-secret-tool
# Specification: https://www.hashicorp.com/blog/building-a-vault-token-helper/

set -eu

vault_id=${VAULT_ADDR:-default}
group=""
case $0 in
	*vault-token-helper-secret-tool-*)
		group="${0##*vault-token-helper-secret-tool-}"
		;;
esac

attribute_values="vault[$group] $vault_id"
label="Vault $vault_id ${group^^} token"

store() {
	if [[ "$group" == root && "${1:-}" != '--force' ]]; then
		echo "Overwriting root token is not allowed !" >&2
		echo "Use the command below to force overwrite:" >&2
		echo "  $(basename $0) store --force" >&2
		return 1
	fi
	read -r token || :
	if test -z "$token"; then
		erase
		return
	fi
	# Assumes builtin printf; otherwise token observable from process list
	# shellcheck disable=SC2086
	printf "%s" "$token" |
		secret-tool store --label="$label" $attribute_values
}

erase() {
	# shellcheck disable=SC2086
	secret-tool clear $attribute_values
}

get() {
	set +e
	# shellcheck disable=SC2086
	token=$(secret-tool lookup $attribute_values)
	rc=$?
	test $rc -eq 1 -a -z "$token" && return 0
	printf %s "$token"
	return $rc
}

enable() {
	cd "$(dirname "$0")"
	script="$(pwd)/$(basename "$0")"
	helper_line="token_helper = \"$script\""
	conf=${VAULT_CONFIG_FILE:-~/.vault}
	if [[ -f "$conf" ]] && grep -q '^[[:space:]]*token_helper\>' "$conf"; then
		sed -i "s@[[:space:]]*token_helper.*@$helper_line@g" $conf
	else
		printf "%s\n" "$helper_line" >>"$conf"
	fi
}

case ${1-} in
	store | erase | get | enable)
		$*
		;;
	*)
		printf "usage: %s {store | erase | get | enable}\n" "$0" >&2
		exit 2
		;;
esac
