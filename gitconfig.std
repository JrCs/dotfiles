[color]
	ui = auto
	wtf = auto
[color "diff"]
	commit = 184
	old = 9
	new = green
[color "diff-highlight"]
	oldNormal = 9
	oldHighlight = black 9
	newNormal = green
	newHighlight = black green
[color "branch"]
	current = green
	local = yellow
	remote = red
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[diff-so-fancy]
	markEmptyLines = false
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
	excludesfile = ~/.gitignore

[alias]
	st = status
	cav = commit -a -v
	ci = commit
	br = branch -vv
	co = checkout
	df = diff
	dc = diff --cached
	dw = diff --word-diff --color-words
	dis = diff --ignore-all-space
	lg = log --graph --pretty=tformat:'%C(auto)%h%Creset - %s%C(auto)%d%Creset %C(green)(%C(bold blue)%an%Creset %C(green)%ar)%Creset'
	lp = log -p
	lol = log --graph --decorate --pretty=oneline --abbrev-commit --show-notes=*
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --show-notes=*
	lr = log -g
	sp = "!bash -ic 'fshow \"$@\"'"
	ls = ls-files
	oops = commit --amend --no-edit
	# Prune local tags
	pt = "!f() { git fetch --prune $(git remote) +refs/tags/*:refs/tags/*; }; f"
	scrub = "!f() { git branch --merged | grep -v master | xargs -r git branch -d; }; f"

	# Show files ignored by git:
	ign = ls-files -o -i --exclude-standard
	unstage = reset HEAD --

	# Checkout a pull request from origin (of a github repository)
	pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

	addpr = "!f() { b=`git symbolic-ref -q --short HEAD` && \
		echo \"Making branch for pull request #$1 [pr/$1]\" && \
		git fetch origin pull/$1/head:pr/$1 && \
		echo \"Rebasing pr/$1 onto $b...\" && \
		git fetch -q -f origin pull/$1/merge:refs/PR_MERGE_HEAD && \
		git rebase -q --onto $b PR_MERGE_HEAD^ pr/$1 && \
		git checkout -q $b && echo && \
		git diff --stat $b..pr/$1 && echo && \
		git log --oneline $b..pr/$1; \
		git update-ref -d refs/PR_MERGE_HEAD; \
	}; f"

[diff]
	mnemonicPrefix = true
	renames = copies
	wordRegex = .
	submodule = log

[fetch]
	recurseSubmodules = on-demand
	prune = true

[grep]
	extendedRegexp = true

[apply]
	whitespace = nowarn

[branch]
	autosetupmerge = true

[log]
	abbrevCommit = true
	decorate = short
	date = local

[rebase]
	autosquash = true

[merge]
	tool = meld
	log = true

[mergetool.ediff]
	cmd = xemacs --eval \"(progn (setq ediff-quit-hook 'kill-emacs) (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\"))\"
	trustExitCode = false

[pull]
	# This is GREATâ€¦ when you know what you're doing and are careful
	# not to pull --no-rebase over a local line containing a true merge.
	# rebase = true
	# WARNING! This option, which does away with the one gotcha of
	# auto-rebasing on pulls, is only available from 1.8.5 onwards.
	rebase = preserve

[push]
	default = upstream

[rerere]
	autoupdate = true
	enabled = true

[status]
	submoduleSummary = true
	showUntrackedFiles = all

[tag]
	sort = version:refname

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[url "git@gitlab.cnp.recouv"]
	insteadOf = "https://gitlab.cnp.recouv"
