# -*- shell-script -*-

if [[ -n "$BASH_VERSION" && -z "$BASH_COMPLETION_COMPAT_DIR" ]]; then
    for file in \
        /etc/bash_completion \
            /usr/share/bash-completion/bash_completion \
            /usr/local/share/bash-completion/bash_completion; do
        if [[ -f "$file" ]]; then
            source "$file" && break
        fi
    done
fi

# The next lines enables shell command completion and alias for brew.
if type brew &>/dev/null; then
  HOMEBREW_PREFIX="$(brew --prefix)"
  if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
      source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
      for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
          [[ -r "${COMPLETION}" ]] && source "${COMPLETION}"
      done
  fi
fi

# MacPorts completions
if [[ -f /opt/local/share/bash-completion/bash_completion ]]; then
    . /opt/local/share/bash-completion/bash_completion
fi

# The next line enables shell command completion and alias for kubectl.
if test $(type -P kubectl); then
    source <(kubectl completion bash)
    alias k="kubectl"
    complete -o default -F __start_kubectl k
    command -v kubecolor >/dev/null 2>&1 && alias k="kubecolor"
fi

# The next line enables shell command completion for stern.
test $(type -P stern) && source <($(type -P stern) --completion=bash)

# The next line enables shell command completion for terraform.
test $(type -P terraform) && complete -C $(type -P terraform) terraform

# The next line enables shell command completion for helm.
test $(type -P helm) && source <(helm completion bash)

# The next line enables shell command completion for kustomize.
test $(type -P kustomize) && source <($(type -P kustomize) completion bash)

# The next line enables shell command completion for kind.
test $(type -P kind) && source <(kind completion bash)

# The next line enables shell command completion for velero.
test $(type -P velero) && source <(velero completion bash)

# e next line enables shell command completion for smallstep cli (aka step)
test $(type -P step) && source "$DOTFILES_DIR/bash/completion_scripts/step"


if [[ -n "$HAVE_RUBY" ]];then
   # rake
   complete -C "$DOTFILES_DIR/bash/completion_scripts/rake_completion" -o default rake
fi
   
if [[ -n "$HAVE_PERL" ]];then
   # ack
   source "$DOTFILES_DIR/ack/completion.bash"
fi

# git flow
source "$DOTFILES_DIR/bash/completion_scripts/git-flow-completion/git-flow-completion.bash"

# todo.txt-cli
[[ -f "$DOTFILES_DIR/todo.txt-cli/todo_completion" ]] && source "$DOTFILES_DIR/todo.txt-cli/todo_completion"

if [[ -n "$HAVE_PYTHON" ]];then
   # cheat
   [[ -f "$DOTFILES_DIR/cheat/autocompletion/cheat.bash" ]] && source "$DOTFILES_DIR/cheat/autocompletion/cheat.bash"
fi

# git-extras
[[ -f "$DOTFILES_DIR/git-extras/bash_completion.d/git-extras" ]] && source "$DOTFILES_DIR/git-extras/bash_completion.d/git-extras"

# Local Variables:      #
# mode: ksh             #
# tab-width: 4          #
# indent-tabs-mode: nil #
# End:                  #
#
# vi: set expandtab ts=4 sw=4 sts=4: #
