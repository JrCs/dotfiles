#!/bin/bash

# A basically sane bash environment.

####################
# Specific OS config
####################
# Turn case-insensitive matching temporarily on, if necessary.
nocasematchWasOff=0
shopt nocasematch >/dev/null || nocasematchWasOff=1
(( nocasematchWasOff )) && shopt -s nocasematch

configOS=''
case "${OSTYPE}" in
    linux*)  configOS='linux'  ;;
    darwin*) configOS='darwin' ;;
esac

# Restore state of 'nocasematch' option, if necessary.
(( nocasematchWasOff )) && shopt -u nocasematch
unset nocasematchWasOff

[[ -n "$configOS" && -f "$DOTFILES_DIR"/bash/config.$configOS ]] && \
 source "$DOTFILES_DIR"/bash/config.$configOS
unset configOS

##########
# Color
##########
ls --color /dev/null >/dev/null 2>&1 && gnu_ls=1 || gnu_ls=0
if [[ "$gnu_ls" -eq 1 ]]; then
    # GNU ls
    DIRCOLORS_BIN=$(type -P dircolors gdircolors | head -n 1)
    if [ -n "$DIRCOLORS_BIN" ];then
        test -r ~/.dircolors && eval "$($DIRCOLORS_BIN -b ~/.dircolors)" || eval "$($DIRCOLORS_BIN -b)"
    fi

    if [ -n "$LS_COLORS" ];then
        # LS
        alias ll='ls -al --color=auto'
        alias ls='ls --color=auto'
    fi
else
    # BSD ls
    export CLICOLOR=1
    export LSCOLORS=ExFxCxDxBxegedabagacad
    alias ll='ls -alG'
    alias ls='ls -G'
fi
unset gnu_ls

# GREP
if echo "test" | grep -q --color=auto 'test' 2>/dev/null; then
    export GREP_COLOR='3;32'
    alias grep='grep --color=auto'
fi

# TREE
HAVE_TREE=$(type -P tree)
[[ -n "$HAVE_TREE" ]] && alias tree='tree -C'
unset HAVE_TREE

##########
# History
##########
HISTFILESIZE=100000
HISTSIZE=10000
# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoreboth:erasedups
# don't use timestamp
unset HISTTIMEFORMAT

# append to the history file, don't overwrite it
shopt -s histappend
# save history file after each command
case $PROMPT_COMMAND in
    *history\ -a*)
       ;;
    *) PROMPT_COMMAND="${PROMPT_COMMAND+$PROMPT_COMMAND ; }history -a"
       ;;
esac

##########
# Misc
##########
HAVE_VIM=$(type -P vim)
[[ -n "$HAVE_VIM" ]] && export EDITOR=vim
unset HAVE_VIM

HAVE_LESS=$(type -P less)
if [[ -n "$HAVE_LESS" ]];then
    export LESS='-FiRX'
    PAGER='less -FiRX'
    MANPAGER='less -FiRsX'
else
    PAGER=more
    MANPAGER="$PAGER"
fi
export PAGER MANPAGER
unset HAVE_LESS

# lesspipe.sh & code2color
LESSPIPESH_BIN=$(type -P lesspipe.sh)
if [[ -n $(type -P code2color) && -n "$LESSPIPESH_BIN" ]];then
    export LESSOPEN="|$LESSPIPESH_BIN %s"
fi

HAVE_PERL=$(type -P perl)
if [[ -n "$HAVE_PERL" ]]; then
    # Ack
    ACK_PAGER="$PAGER"
    ACK_PAGER_COLOR="$PAGER"
fi

##############
# todo.txt-cli
##############
if [[ -d "$HOME/.todo" && -f "$HOME/.todo.cfg" ]];then
     export TODOTXT_CFG_FILE="$HOME/.todo.cfg"
     alias t='todo.sh'
     complete -F _todo t
fi

######
# xssh
######
if [[ -f "$HOME/.xssh_rc" ]];then
    source "$DOTFILES_DIR/xssh/xssh.sh"
    alias ssh >/dev/null 2>&1 || alias ssh=xssh
fi


HAVE_PYTHON=$(type -P python2.7 python2.6 python | head -n 1)
if [[ -n "$HAVE_PYTHON" ]]; then
    ##########
    # Autojump
    ##########
    for autojump_dir in "$DOTFILES_DIR/autojump" "$DOTFILES_DIR/autojump/bin";do
        if [[ -f "$autojump_dir/autojump.bash" ]];then
            [[ -z "$AUTOJUMP_IGNORE_CASE" ]]   && export AUTOJUMP_IGNORE_CASE=1
            [[ -z "$AUTOJUMP_KEEP_SYMLINKS" ]] && export AUTOJUMP_KEEP_SYMLINKS=1
            source "$autojump_dir/autojump.bash"
            export AUTOJUMP_PYTHON_BIN="$HAVE_PYTHON"
            export AUTOJUMP_BIN="$autojump_dir/autojump"
            break
        fi
    done
    if [[ -n "$AUTOJUMP_BIN" && -n "$AUTOJUMP_PYTHON_BIN" ]]; then
        eval $(echo "autojump() { '${AUTOJUMP_PYTHON_BIN}' '${AUTOJUMP_BIN}' \$@ ;" })
    fi
    unset autojump_dir AUTOJUMP_PYTHON_BIN AUTOJUMP_BIN
    
    ############
    # pastebinit
    ############
    # Check if we have the configobj python module
    "$DOTFILES_DIR/bin/test-python-import.py" configobj >/dev/null
    if [[ $? -ne 0 ]]; then
        # Add configobj library to $PYTHONPATH
        case $PYTHONPATH in
            *configobj*) ;;
            *) export PYTHONPATH="${PYTHONPATH:+$PYTHONPATH:}$DOTFILES_DIR/libraries/configobj-4.7.2"
        esac
    fi
    
    ########
    # Cheat
    ########
    export CHEATCOLORS=true
    # Check if we have the argparse python module
    "$DOTFILES_DIR/bin/test-python-import.py" argparse >/dev/null
    if [[ $? -ne 0 ]]; then
        # Add argparse library to $PYTHONPATH
        case $PYTHONPATH in
            *argparse*) ;;
            *) export PYTHONPATH="${PYTHONPATH:+$PYTHONPATH:}$DOTFILES_DIR/libraries/argparse-1.2"
        esac
    fi
fi

#########
# PROMPT
#########
#  Don't set PS1 for remote emacs, want full when running inside emacs
if [[ ! -z "$TERM" && ("$TERM" != "dumb" || ! -z "$INSIDE_EMACS") ]]; then
    source $DOTFILES_DIR/bash/prompt
fi

# Local Variables:      #
# mode: ksh             #
# tab-width: 4          #
# indent-tabs-mode: nil #
# End:                  #
#
# vi: set expandtab ts=4 sw=4 sts=4: #
